[{"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\index.tsx":"1","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\App.tsx":"2","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Contexts\\ActiveUserContext.tsx":"3","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\Router.tsx":"4","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Authorities.ts":"5","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\AuthorityService.ts":"6","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Api.ts":"7","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\UserService.ts":"8","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\PrivateRoute.tsx":"9","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"10","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\HomePage\\HomePage.tsx":"11","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\UnauthorizedPage\\UnauthorizedPage.tsx":"12","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\AdminPage\\AdminPage.tsx":"13","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LandingPage\\LandingPage.tsx":"14","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\ProfilePage\\ProfilePage.tsx":"15","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\ImagePostService.ts":"16","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\BottomBar\\BottomBar.tsx":"17","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\UserList\\UserList.tsx":"18","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\ImagePostBlog\\ImagePostBlog.tsx":"19","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\NavBar\\NavBar.tsx":"20","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\LandingPageBox\\LandingPageBox.tsx":"21","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\UserDetailsBox\\UserDetailsBox.tsx":"22","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\UserEntry\\UserEntry.tsx":"23","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\SearchBar\\SearchBar.tsx":"24","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\imagePost\\ImagePostEntry.tsx":"25","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\types\\Nullable.ts":"26","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\CreatePostPopUp\\CreateEditPostPopUp.tsx":"27","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\EditPostPopUp\\EditPostPopUp.tsx":"28"},{"size":366,"mtime":1667289517984,"results":"29","hashOfConfig":"30"},{"size":300,"mtime":1667289517939,"results":"31","hashOfConfig":"30"},{"size":6322,"mtime":1668155487166,"results":"32","hashOfConfig":"30"},{"size":2162,"mtime":1668177901513,"results":"33","hashOfConfig":"30"},{"size":191,"mtime":1668155487192,"results":"34","hashOfConfig":"30"},{"size":1171,"mtime":1668153699911,"results":"35","hashOfConfig":"30"},{"size":1749,"mtime":1667289518294,"results":"36","hashOfConfig":"30"},{"size":1014,"mtime":1668177901515,"results":"37","hashOfConfig":"30"},{"size":2325,"mtime":1668155487167,"results":"38","hashOfConfig":"30"},{"size":3296,"mtime":1668177901529,"results":"39","hashOfConfig":"30"},{"size":1343,"mtime":1668177890933,"results":"40","hashOfConfig":"30"},{"size":435,"mtime":1668155487190,"results":"41","hashOfConfig":"30"},{"size":2724,"mtime":1668177901528,"results":"42","hashOfConfig":"30"},{"size":398,"mtime":1668155487184,"results":"43","hashOfConfig":"30"},{"size":2804,"mtime":1668354271008,"results":"44","hashOfConfig":"30"},{"size":1642,"mtime":1668355041001,"results":"45","hashOfConfig":"30"},{"size":669,"mtime":1668177890919,"results":"46","hashOfConfig":"30"},{"size":1293,"mtime":1668177901527,"results":"47","hashOfConfig":"30"},{"size":2129,"mtime":1668352265790,"results":"48","hashOfConfig":"30"},{"size":2115,"mtime":1668179997500,"results":"49","hashOfConfig":"30"},{"size":488,"mtime":1668155487179,"results":"50","hashOfConfig":"30"},{"size":910,"mtime":1668179986910,"results":"51","hashOfConfig":"30"},{"size":963,"mtime":1668177901519,"results":"52","hashOfConfig":"30"},{"size":1167,"mtime":1668177890916,"results":"53","hashOfConfig":"30"},{"size":4963,"mtime":1668354867686,"results":"54","hashOfConfig":"30"},{"size":36,"mtime":1667289518376,"results":"55","hashOfConfig":"30"},{"size":5678,"mtime":1668354202921,"results":"56","hashOfConfig":"30"},{"size":5557,"mtime":1668354846799,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"7g90bu",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\index.tsx",[],["120","121"],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\App.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Contexts\\ActiveUserContext.tsx",["122"],"import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res.data);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\Router.tsx",["123"],"import React, { useContext } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport LoginPage from \"../components/pages/LoginPage/LoginPage\";\r\nimport ActiveUserContext from \"../Contexts/ActiveUserContext\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport authorities from \"../config/Authorities\";\r\nimport HomePage from \"../components/pages/HomePage/HomePage\";\r\nimport LandingPage from \"../components/pages/LandingPage/LandingPage\";\r\nimport UnauthorizedPage from \"../components/pages/UnauthorizedPage/UnauthorizedPage\";\r\nimport AdminPage from \"../components/pages/AdminPage/AdminPage\";\r\nimport ProfilePage from \"../components/pages/ProfilePage/ProfilePage\";\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n  const { checkRole } = useContext(ActiveUserContext);\r\n  const { user } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path={\"/\"} element={<LandingPage />} />\r\n      <Route\r\n        path={\"/unauthorized\"}\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<UnauthorizedPage />} />\r\n        }\r\n      />\r\n      <Route path={\"/login\"} element={<LoginPage />} />\r\n      <Route\r\n        path={\"/homepage\"}\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[\r\n              {\r\n                id: \"2b0a0711-8807-4d20-b376-5d5b184078c3\",\r\n                name: authorities.READ,\r\n              },\r\n            ]}\r\n            element={\r\n              checkRole(\"ADMIN\") === false ? <HomePage /> : <AdminPage />\r\n            }\r\n          />\r\n        }\r\n      />\r\n      <Route\r\n        path={`/users/:userid`}\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[\r\n              {\r\n                id: \"2b0a0711-8807-4d20-b376-5d5b184078c3\",\r\n                name: authorities.READ,\r\n              },\r\n            ]}\r\n            element={<ProfilePage />}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route path={\"*\"} element={<div>Not Found</div>} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Authorities.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\AuthorityService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Api.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\UserService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\PrivateRoute.tsx",["124"],"import React, { useContext } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport ActiveUserContext from \"../Contexts/ActiveUserContext\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport { Authority } from \"../types/models/Authority.model\";\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: Authority[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities: authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem(\"token\");\r\n    if (!tokenString) {\r\n      console.error(\"no token found\");\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace(\"Bearer \", \"\");\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to=\"/login\" replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 ||\r\n    authorities.some((authority) => {\r\n      return AuthorityService.hasAuthority(authority.name);\r\n    });\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to=\"/unauthorized\" replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    // Pagelayout puts the Navigation, Menu etc. around the component\r\n    RouteComponent\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\HomePage\\HomePage.tsx",["125"],"import { Box } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ImagePostService } from \"../../../Services/ImagePostService\";\r\nimport { ImagePost } from \"../../../types/models/ImagePost.model\";\r\nimport BottomBar from \"../../organisms/BottomBar/BottomBar\";\r\nimport ImagePostBlog from \"../../organisms/ImagePostBlog/ImagePostBlog\";\r\nimport NavBar from \"../../organisms/NavBar/NavBar\";\r\n\r\nexport default function HomePage() {\r\n  const [imagePosts, setImagePosts] = useState<ImagePost[]>([]);\r\n  const [pageNumber, setPageNumber] = useState<number>(0);\r\n  const [canLoadMorePosts, setCanLoadMorePosts] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    ImagePostService()\r\n      .getAllImagePosts(pageNumber)\r\n      .then((data) => {\r\n        if (data.length === 0) {\r\n          setCanLoadMorePosts(false);\r\n        }\r\n        const newImagePosts: ImagePost[] = imagePosts.concat(data);\r\n        setImagePosts(newImagePosts);\r\n      });\r\n  }, [pageNumber]);\r\n\r\n  return (\r\n    <Box>\r\n      <NavBar pageName=\"Homepage\" />\r\n      <ImagePostBlog\r\n        imagePostList={imagePosts}\r\n        postsEditable={false}\r\n        pageNumber={pageNumber}\r\n        setPageNumber={setPageNumber}\r\n        canLoadMorePosts={canLoadMorePosts}\r\n        isProfile={false}\r\n      />\r\n      <BottomBar />\r\n    </Box>\r\n  );\r\n}\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\UnauthorizedPage\\UnauthorizedPage.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\AdminPage\\AdminPage.tsx",["126","127","128","129","130","131"],"import { Box, Tab, Tabs } from \"@mui/material\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\r\nimport { ImagePostService } from \"../../../Services/ImagePostService\";\r\nimport UserService from \"../../../Services/UserService\";\r\nimport { ImagePost } from \"../../../types/models/ImagePost.model\";\r\nimport { User } from \"../../../types/models/User.model\";\r\nimport BottomBar from \"../../organisms/BottomBar/BottomBar\";\r\nimport ImagePostBlog from \"../../organisms/ImagePostBlog/ImagePostBlog\";\r\nimport NavBar from \"../../organisms/NavBar/NavBar\";\r\nimport UserList from \"../../organisms/UserList/UserList\";\r\n\r\nexport default function AdminPage() {\r\n  const [imagePosts, setImagePosts] = useState<ImagePost[]>([]);\r\n  const [userList, setUserList] = useState<User[]>([])\r\n  const [pageNumber, setPageNumber] = useState<number>(0);\r\n  const [canLoadMorePosts, setCanLoadMorePosts] = useState<boolean>(true);\r\n  const [tab, setTab] = useState<AdminTab>(AdminTab.BLOG)\r\n\r\n  const activeUserContext = useContext(ActiveUserContext)\r\n\r\n  useEffect(() => {\r\n    ImagePostService()\r\n      .getAllImagePosts(pageNumber)\r\n      .then((data) => {\r\n        if (data.length === 0) {\r\n          setCanLoadMorePosts(false);\r\n        }\r\n        const newImagePosts: ImagePost[] = pageNumber === 0 ? data : imagePosts.concat(data);\r\n        setImagePosts(newImagePosts);\r\n      });\r\n  }, [pageNumber]);\r\n\r\n  useEffect(() => {\r\n    UserService\r\n      .getAllUsers(pageNumber)\r\n      .then((data) => {\r\n        const newUserList: User[] = pageNumber === 0 ? data : userList.concat(data);\r\n        setUserList(newUserList);\r\n      });\r\n  }, [pageNumber])\r\n\r\n  return (\r\n    <div>\r\n      <NavBar pageName=\"Admin Page\" />\r\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", position: \"relative\" }}>\r\n        <Tabs value={tab} onChange={(event, value) => {\r\n          setTab(value)\r\n          setCanLoadMorePosts(true)\r\n          setPageNumber(0)\r\n        }} sx={{ width: \"100%\", maxWidth: \"1920px\", position: \"fixed\" }}>\r\n          <Tab label=\"Blogs\" />\r\n          <Tab label=\"User\" />\r\n        </Tabs>\r\n        <Box hidden={tab !== AdminTab.BLOG}>\r\n          <ImagePostBlog\r\n            imagePostList={imagePosts}\r\n            postsEditable={true}\r\n            pageNumber={pageNumber}\r\n            setPageNumber={setPageNumber}\r\n            canLoadMorePosts={canLoadMorePosts}\r\n            isProfile={false}\r\n          />\r\n        </Box>\r\n        <Box hidden={tab !== AdminTab.USERS}>\r\n          <UserList users={userList} />\r\n        </Box>\r\n      </Box>\r\n      <BottomBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nenum AdminTab {\r\n  BLOG, USERS\r\n}\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LandingPage\\LandingPage.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\ProfilePage\\ProfilePage.tsx",["132","133"],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\ImagePostService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\BottomBar\\BottomBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\UserList\\UserList.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\ImagePostBlog\\ImagePostBlog.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\NavBar\\NavBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\LandingPageBox\\LandingPageBox.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\UserDetailsBox\\UserDetailsBox.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\UserEntry\\UserEntry.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\SearchBar\\SearchBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\imagePost\\ImagePostEntry.tsx",["134"],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\types\\Nullable.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\CreatePostPopUp\\CreateEditPostPopUp.tsx",["135"],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\EditPostPopUp\\EditPostPopUp.tsx",["136"],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":172,"column":6,"nodeType":"143","endLine":172,"endColumn":8,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":18,"column":11,"nodeType":"147","messageId":"148","endLine":18,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":20,"column":3,"nodeType":"151","messageId":"152","endLine":20,"endColumn":27,"fix":"153"},{"ruleId":"141","severity":1,"message":"154","line":24,"column":6,"nodeType":"143","endLine":24,"endColumn":18,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":18,"column":44,"nodeType":"147","messageId":"158","endLine":18,"endColumn":52},{"ruleId":"145","severity":1,"message":"159","line":20,"column":9,"nodeType":"147","messageId":"148","endLine":20,"endColumn":26},{"ruleId":"141","severity":1,"message":"154","line":32,"column":6,"nodeType":"143","endLine":32,"endColumn":18,"suggestions":"160"},{"ruleId":"141","severity":1,"message":"161","line":41,"column":6,"nodeType":"143","endLine":41,"endColumn":18,"suggestions":"162"},{"ruleId":"156","severity":1,"message":"157","line":55,"column":30,"nodeType":"147","messageId":"158","endLine":55,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":65,"column":30,"nodeType":"147","messageId":"158","endLine":65,"endColumn":38},{"ruleId":"141","severity":1,"message":"163","line":38,"column":6,"nodeType":"143","endLine":38,"endColumn":8,"suggestions":"164"},{"ruleId":"141","severity":1,"message":"154","line":52,"column":6,"nodeType":"143","endLine":52,"endColumn":24,"suggestions":"165"},{"ruleId":"145","severity":1,"message":"166","line":1,"column":85,"nodeType":"147","messageId":"148","endLine":1,"endColumn":91},{"ruleId":"145","severity":1,"message":"167","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":16},{"ruleId":"145","severity":1,"message":"167","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":16},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["170"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","no-useless-rename","Destructuring assignment authorities unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"171","text":"172"},"React Hook useEffect has a missing dependency: 'imagePosts'. Either include it or remove the dependency array.",["173"],"@typescript-eslint/no-use-before-define","'AdminTab' was used before it was defined.","noUseBeforeDefine","'activeUserContext' is assigned a value but never used.",["174"],"React Hook useEffect has a missing dependency: 'userList'. Either include it or remove the dependency array.",["175"],"React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["176"],["177"],"'Button' is defined but never used.","'Author' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},[531,555],"authorities",{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [loadActiveUser]",{"range":"189","text":"190"},"Update the dependencies array to be: [imagePosts, pageNumber]",{"range":"191","text":"192"},{"range":"193","text":"192"},"Update the dependencies array to be: [pageNumber, userList]",{"range":"194","text":"195"},"Update the dependencies array to be: [userid]",{"range":"196","text":"197"},"Update the dependencies array to be: [imagePosts, pageNumber, user]",{"range":"198","text":"199"},[5566,5568],"[loadActiveUser]",[979,991],"[imagePosts, pageNumber]",[1450,1462],[1700,1712],"[pageNumber, userList]",[1627,1629],"[userid]",[2035,2053],"[imagePosts, pageNumber, user]"]