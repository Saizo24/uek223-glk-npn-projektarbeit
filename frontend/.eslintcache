[{"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\index.tsx":"1","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\App.tsx":"2","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Contexts\\ActiveUserContext.tsx":"3","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\Router.tsx":"4","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\AuthorityService.ts":"5","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Api.ts":"6","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\UserService.ts":"7","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\PrivateRoute.tsx":"8","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\HomePage\\HomePage.tsx":"9","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"10","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\ImagePostService.ts":"11","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\NavBar\\NavBar.tsx":"12","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\BottomBar\\BottomBar.tsx":"13","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\ImagePostBlog\\ImagePostBlog.tsx":"14","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\SearchBar\\MySearchBar.tsx":"15","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\imagePost\\ImagePostEntry.tsx":"16"},{"size":366,"mtime":1667289517984,"results":"17","hashOfConfig":"18"},{"size":300,"mtime":1667289517939,"results":"19","hashOfConfig":"18"},{"size":6120,"mtime":1667289518066,"results":"20","hashOfConfig":"18"},{"size":1412,"mtime":1667570421386,"results":"21","hashOfConfig":"18"},{"size":1171,"mtime":1667570421386,"results":"22","hashOfConfig":"18"},{"size":1749,"mtime":1667289518294,"results":"23","hashOfConfig":"18"},{"size":774,"mtime":1667289518197,"results":"24","hashOfConfig":"18"},{"size":2279,"mtime":1667570421385,"results":"25","hashOfConfig":"18"},{"size":869,"mtime":1667571748917,"results":"26","hashOfConfig":"18"},{"size":3195,"mtime":1667289518263,"results":"27","hashOfConfig":"18"},{"size":269,"mtime":1667572255970,"results":"28","hashOfConfig":"18"},{"size":1044,"mtime":1667570421409,"results":"29","hashOfConfig":"18"},{"size":571,"mtime":1667570421400,"results":"30","hashOfConfig":"18"},{"size":1348,"mtime":1667915302015,"results":"31","hashOfConfig":"18"},{"size":1111,"mtime":1667915091534,"results":"32","hashOfConfig":"18"},{"size":1270,"mtime":1667919858400,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"7g90bu",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\index.tsx",[],["70","71"],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\App.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Contexts\\ActiveUserContext.tsx",["72"],"import { createContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../config/Api';\nimport roles from '../config/Roles';\nimport AuthorityService from '../Services/AuthorityService';\nimport UserService from '../Services/UserService';\nimport { User } from '../types/models/User.model';\nimport { Nullable } from '../types/Nullable';\n\n/**\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\n * activeUser gets stored.\n */\nexport const USER_DATA_LOCAL_STORAGE_KEY = 'user';\nexport const TOKEN_LOCAL_STORAGE_KEY = 'token';\n\n/**\n * ActiveUserContextType defines the provided values\n */\nexport type ActiveUserContextType = {\n  user: Nullable<User>;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  setActiveUser: (user: User) => void;\n  loadActiveUser: () => void;\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\n};\n\n/**\n * noContextProviderFound is a method that throws an error and is used\n * inside the defaultContextValue\n */\nconst noContextProviderFound = () => {\n  throw new Error('No provider for the ActiveUserContext found');\n};\n\n/**\n * defaultContextValue defines the default values for the ActiveUserContext.\n */\nconst defaultContextValue: ActiveUserContextType = {\n  user: null,\n  login: noContextProviderFound,\n  logout: noContextProviderFound,\n  setActiveUser: noContextProviderFound,\n  loadActiveUser: noContextProviderFound,\n  checkRole: noContextProviderFound,\n};\n\n/**\n * ActiveUserContext has the purpose of providing the currently active user\n * as well as related values, modifiers and related operations such as login\n * and logout.\n */\nconst ActiveUserContext =\n  createContext<ActiveUserContextType>(defaultContextValue);\nexport default ActiveUserContext;\n\n/**\n * Props for the ActiveUserContextProvider Component\n */\ntype ActiveUserContextProviderProps = {\n  children: React.ReactNode;\n};\n\n/**\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\n * to all child-components.\n * @param children consists of all the elements that are located inside the\n */\nexport const ActiveUserContextProvider = ({\n  children,\n}: ActiveUserContextProviderProps) => {\n  /**\n   * Try to load the user data that is stored inside the LocalStorage.\n   * If non is present, null will be returned.\n   */\n  const loadSavedUserData = (): Nullable<User> => {\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\n    if (storeUser === null) return null;\n    return JSON.parse(storeUser);\n  };\n\n  // The following line defines the user state which is holding the user\n  // data inside this context.\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\n  const navigate = useNavigate();\n  /**\n   * Update the user that is provided by the ActiveUserContext\n   * @param updatedUser\n   */\n  const setActiveUser = (updatedUser: User) => {\n    setUser(updatedUser);\n    localStorage.setItem(\n      USER_DATA_LOCAL_STORAGE_KEY,\n      JSON.stringify(updatedUser)\n    );\n  };\n\n  /**\n   * Remove all user and authorization related data from the localStorage\n   */\n  const resetAuthorization = () => {\n    // Reset the stored data inside the AuthorityService.\n    AuthorityService.clearAuthorities();\n    // Clear all data from the localStorage.\n    localStorage.clear();\n    // Set the user, which is stored inside the context to null.\n    setUser(null);\n  };\n\n  /**\n   * Logout the currently active user by resetting the stored user data\n   * and redirecting to the LoginPage.\n   */\n  const logout = () => {\n    // If no token is saved inside the local storage clear the localStorage directly\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\n      resetAuthorization();\n      return;\n    }\n    // If a token is present send a logout-request and clear the localStorage afterwards\n    api.get('/logout').finally(resetAuthorization);\n    //navigate to login page\n    navigate('/login');\n  };\n\n  /**\n   * Login with the provided credentials. If successful the current user gets\n   * updated and stored inside the context. Also the JWT-Token for further\n   * request based authentication is stored inside the localStorage.\n   * @param email\n   * @param password\n   */\n  const login = async (email: string, password: string) => {\n    await api.post('user/login', { email, password }).then((response: any) => {\n      console.log(response.headers.authorization);\n      localStorage.setItem(\n        TOKEN_LOCAL_STORAGE_KEY,\n        response.headers.authorization\n      );\n      setActiveUser(response.data);\n      return true;\n    });\n    return false;\n  };\n\n  /**\n   * Request the user data for the currently active user from the api\n   * and save it to the context-state.\n   */\n  const loadActiveUser = () => {\n    return user\n      ? UserService.getUser(user.id).then((res: any) => {\n          setActiveUser(res.data);\n        })\n      : null;\n  };\n\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\n  }\n\n  /**\n   * Try to load the user-object from the localStorage if present.\n   * This is done automatically on the first render of this component.\n   */\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\n    if (token !== null) {\n      loadActiveUser();\n    }\n  }, []);\n\n  /**\n   * If the user state is updated and the user is not equal to null,\n   * the data used in the AuthorityService as well as the data stored inside\n   * the localStorage will be updated with the new user-data.\n   */\n  useEffect(() => {\n    if (user !== null) {\n      AuthorityService.initAuthoritySet(user);\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <ActiveUserContext.Provider\n        value={{\n          user,\n          setActiveUser,\n          login,\n          logout,\n          loadActiveUser,\n          checkRole: activeUserHasRole,\n        }}\n      >\n        {children}\n      </ActiveUserContext.Provider>\n    </div>\n  );\n};\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\Router.tsx",["73","74"],"import React, { useContext } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport LoginPage from \"../components/pages/LoginPage/LoginPage\";\r\nimport ActiveUserContext from \"../Contexts/ActiveUserContext\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport HomePage from \"../components/pages/HomePage/HomePage\";\r\n\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n  //const { checkRole } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path={\"/\"} element={<HomePage />} />\r\n      <Route path={\"/login\"} element={<LoginPage />} />\r\n\r\n      <Route\r\n        path={\"/users\"}\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<div>nothing here</div>} />\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/users/:userId\"\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route\r\n        path=\"/profile\"\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route path=\"*\" element={<div>Not Found</div>} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\AuthorityService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\config\\Api.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\UserService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Router\\PrivateRoute.tsx",["75"],"import React, { useContext } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport ActiveUserContext from \"../Contexts/ActiveUserContext\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport { Authority } from \"../types/models/Authority.model\";\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: Authority[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities: authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem(\"token\");\r\n    if (!tokenString) {\r\n      console.error(\"no token found\");\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace(\"Bearer \", \"\");\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to=\"/login\" replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 ||\r\n    authorities.some(AuthorityService.hasAuthority.toString);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to=\"/unauthorized\" replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    // Pagelayout puts the Navigation, Menu etc. around the component\r\n    RouteComponent\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\HomePage\\HomePage.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\Services\\ImagePostService.ts",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\NavBar\\NavBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\BottomBar\\BottomBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\organisms\\ImagePostBlog\\ImagePostBlog.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\SearchBar\\MySearchBar.tsx",[],"F:\\Documents\\GitHub\\uek223-glk-npn-projektarbeit\\frontend\\src\\components\\molecules\\imagePost\\ImagePostEntry.tsx",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":172,"column":6,"nodeType":"83","endLine":172,"endColumn":8,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":27},{"ruleId":"85","severity":1,"message":"89","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":25},{"ruleId":"90","severity":1,"message":"91","line":20,"column":3,"nodeType":"92","messageId":"93","endLine":20,"endColumn":27,"fix":"94"},{"ruleId":"85","severity":1,"message":"95","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":11},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["98"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'ActiveUserContext' is defined but never used.","no-useless-rename","Destructuring assignment authorities unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"99","text":"100"},"'Box' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},[531,555],"authorities","Update the dependencies array to be: [loadActiveUser]",{"range":"103","text":"104"},[5395,5397],"[loadActiveUser]"]